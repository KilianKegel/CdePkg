; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28319.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	main
PUBLIC	??_C@_04BCEBBOAK@?1cmd@				; `string'
PUBLIC	??_C@_04INBMAKPJ@?1dis@				; `string'
PUBLIC	??_C@_04EIBLALMK@?1ena@				; `string'
PUBLIC	??_C@_04EJFMPNAD@?1del@				; `string'
PUBLIC	??_C@_05IJKDEMEA@?1guid@			; `string'
PUBLIC	??_C@_05LPMPKBIB@?1list@			; `string'
PUBLIC	??_C@_02GLHBANAM@?1?$DP@			; `string'
PUBLIC	??_C@_02JOILMGJP@?1h@				; `string'
PUBLIC	??_C@_05HDIPJJLA@?1help@			; `string'
PUBLIC	??_C@_0HE@JENICHIJ@?6LoadOption?5UEFI?5shell?5tool?5to?5@ ; `string'
PUBLIC	??_C@_0GB@BCFNMDNB@LoadOption?5?1guid?512345678?90000?9@ ; `string'
PUBLIC	??_C@_0BK@OIHPKFHL@?5?5?5?5or?6LoadOption?5?1list?6?6@ ; `string'
PUBLIC	??_C@_0DP@FIOANFFL@?5?5?5?5?1list?5?5?5list?5all?5command?5li@ ; `string'
PUBLIC	??_C@_0CK@GCGNNGGP@?5?5?5?5?1guid?5?5?5FILE_GUID?5of?5the?5PO@ ; `string'
PUBLIC	??_C@_0ED@CLNLHKAP@?5?5?5?5?1cmd?5?5?5?5command?5line?5includ@ ; `string'
PUBLIC	??_C@_0EO@OEHIONND@?5?5?5?5?1dis?5?5?5?5disable?5a?5driver?5du@ ; `string'
PUBLIC	??_C@_0CH@DOKDNGDN@?5?5?5?5?1ena?5?5?5?5enable?5a?5driver?5for@ ; `string'
PUBLIC	??_C@_0GK@MJJBIJIE@?5?5?5?5?1del?5?5?5?5delete?5command?5line@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_0CM@DOLEJLOO@No?5?$CCCdeLoadOption?$CC?5variable?5fou@ ; `string'
PUBLIC	??_C@_0EI@IIPPCKN@Y?3?2EDK2020?9MinnowBoard?2CdePkg?2L@ ; `string'
PUBLIC	??_C@_1BM@PJHILOPO@?$AAC?$AAd?$AAe?$AAL?$AAo?$AAa?$AAd?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn@ ; `string'
PUBLIC	??_C@_05HKKFJEBI@?$CFS?5?3?5@			; `string'
PUBLIC	??_C@_0DE@HJAEGIGO@?$CF08X?9?$CF04X?9?$CF04X?9?$CF02X?$CF02X?9?$CF02X?$CF02@ ; `string'
PUBLIC	??_C@_0P@BKFKCFOM@Start?5rejected@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_08GJPGANEG@?$CC?$CFs?$CC?5?$CFs?6@	; `string'
PUBLIC	??_C@_0GE@LBPHLFLG@Y?3?2EDK2020?9MinnowBoard?2CdePkg?2L@ ; `string'
PUBLIC	??_C@_0DP@GMEAEDPA@MISSING?5parameter?3?5?1guid?5123456@ ; `string'
PUBLIC	??_C@_0DC@BCAHIDON@MISSING?5parameter?3?5?1cmd?5?$CCdriver@ ; `string'
PUBLIC	??_C@_0BJ@POPDEOLM@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?1dis?6@ ; `string'
PUBLIC	??_C@_0BJ@EBOGCIKL@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?1ena?6@ ; `string'
PUBLIC	??_C@_0BJ@KDFPBFEJ@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?1del?6@ ; `string'
PUBLIC	??_C@_0DI@IDKFPMOM@?$CF8x?9?$CF4hx?9?$CF4hx?9?$CF2hhx?$CF2hhx?9?$CF2hhx?$CF@ ; `string'
PUBLIC	??_C@_0DP@KIJGPBKJ@Invalid?5GUID?5format?6Use?3?5111111@ ; `string'
PUBLIC	??_C@_0DO@PLPJPJHG@Y?3?2EDK2020?9MinnowBoard?2CdePkg?2L@ ; `string'
PUBLIC	??_C@_0FI@CKPHOOAH@CdeLoadOption?5?3?5?$CF08X?9?$CF04X?9?$CF04X?9@ ; `string'
PUBLIC	??_C@_0FH@LOHLGBKB@CdeLoadOption?5?3?5?$CF08X?9?$CF04X?9?$CF04X?9@ ; `string'
PUBLIC	??_C@_0KA@BCMAFLKC@Y?3?2EDK2020?9MinnowBoard?2CdePkg?2L@ ; `string'
PUBLIC	??_C@_0GK@LFFNLDPK@CdeLoadOption?5?3?5?$CF08X?9?$CF04X?9?$CF04X?9@ ; `string'
EXTRN	__acrt_iob_func:PROC
EXTRN	fprintf:PROC
EXTRN	printf:PROC
EXTRN	sscanf:PROC
EXTRN	malloc:PROC
EXTRN	realloc:PROC
EXTRN	strcpy:PROC
EXTRN	strcmp:PROC
EXTRN	memset:PROC
EXTRN	strlen:PROC
EXTRN	wcscpy:PROC
EXTRN	wcscmp:PROC
EXTRN	strefierror:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN65
	DD	imagerel $LN65+2306
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT ??_C@_0GK@LFFNLDPK@CdeLoadOption?5?3?5?$CF08X?9?$CF04X?9?$CF04X?9@
CONST	SEGMENT
??_C@_0GK@LFFNLDPK@CdeLoadOption?5?3?5?$CF08X?9?$CF04X?9?$CF04X?9@ DB 'Cd'
	DB	'eLoadOption : %08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02'
	DB	'X command line "%s" successfully createdn', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0KA@BCMAFLKC@Y?3?2EDK2020?9MinnowBoard?2CdePkg?2L@
CONST	SEGMENT
??_C@_0KA@BCMAFLKC@Y?3?2EDK2020?9MinnowBoard?2CdePkg?2L@ DB 'Y:\EDK2020-M'
	DB	'innowBoard\CdePkg\LoadOptionShell\main.c(%d): fail to read NV'
	DB	'RAM variable "CdeLoadOption" : %08X-%04X-%04X-%02X%02X-%02X%0'
	DB	'2X%02X%02X%02X%02X -> %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@LOHLGBKB@CdeLoadOption?5?3?5?$CF08X?9?$CF04X?9?$CF04X?9@
CONST	SEGMENT
??_C@_0FH@LOHLGBKB@CdeLoadOption?5?3?5?$CF08X?9?$CF04X?9?$CF04X?9@ DB 'Cd'
	DB	'eLoadOption : %08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02'
	DB	'X successfully ENABLED', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@CKPHOOAH@CdeLoadOption?5?3?5?$CF08X?9?$CF04X?9?$CF04X?9@
CONST	SEGMENT
??_C@_0FI@CKPHOOAH@CdeLoadOption?5?3?5?$CF08X?9?$CF04X?9?$CF04X?9@ DB 'Cd'
	DB	'eLoadOption : %08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02'
	DB	'X successfully DISABLED', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@PLPJPJHG@Y?3?2EDK2020?9MinnowBoard?2CdePkg?2L@
CONST	SEGMENT
??_C@_0DO@PLPJPJHG@Y?3?2EDK2020?9MinnowBoard?2CdePkg?2L@ DB 'Y:\EDK2020-M'
	DB	'innowBoard\CdePkg\LoadOptionShell\main.c(%d): %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@KIJGPBKJ@Invalid?5GUID?5format?6Use?3?5111111@
CONST	SEGMENT
??_C@_0DP@KIJGPBKJ@Invalid?5GUID?5format?6Use?3?5111111@ DB 'Invalid GUID'
	DB	' format', 0aH, 'Use: 11111111-2222-3333-4455-66778899AABB', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@IDKFPMOM@?$CF8x?9?$CF4hx?9?$CF4hx?9?$CF2hhx?$CF2hhx?9?$CF2hhx?$CF@
CONST	SEGMENT
??_C@_0DI@IDKFPMOM@?$CF8x?9?$CF4hx?9?$CF4hx?9?$CF2hhx?$CF2hhx?9?$CF2hhx?$CF@ DB '%'
	DB	'8x-%4hx-%4hx-%2hhx%2hhx-%2hhx%2hhx%2hhx%2hhx%2hhx%2hhx', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KDFPBFEJ@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?1del?6@
CONST	SEGMENT
??_C@_0BJ@KDFPBFEJ@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?1del?6@ DB '   '
	DB	'                /del', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EBOGCIKL@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?1ena?6@
CONST	SEGMENT
??_C@_0BJ@EBOGCIKL@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?1ena?6@ DB '   '
	DB	'                /ena', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@POPDEOLM@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?1dis?6@
CONST	SEGMENT
??_C@_0BJ@POPDEOLM@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?1dis?6@ DB '   '
	DB	'                /dis', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@BCAHIDON@MISSING?5parameter?3?5?1cmd?5?$CCdriver@
CONST	SEGMENT
??_C@_0DC@BCAHIDON@MISSING?5parameter?3?5?1cmd?5?$CCdriver@ DB 'MISSING p'
	DB	'arameter: /cmd "drivername parm1 parm2"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@GMEAEDPA@MISSING?5parameter?3?5?1guid?5123456@
CONST	SEGMENT
??_C@_0DP@GMEAEDPA@MISSING?5parameter?3?5?1guid?5123456@ DB 'MISSING para'
	DB	'meter: /guid 12345678-AAAA-BBBB-CCDD-112233445566', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GE@LBPHLFLG@Y?3?2EDK2020?9MinnowBoard?2CdePkg?2L@
CONST	SEGMENT
??_C@_0GE@LBPHLFLG@Y?3?2EDK2020?9MinnowBoard?2CdePkg?2L@ DB 'Y:\EDK2020-M'
	DB	'innowBoard\CdePkg\LoadOptionShell\main.c(%d): "CdeLoadOption"'
	DB	' NVRAM variable not found', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GJPGANEG@?$CC?$CFs?$CC?5?$CFs?6@
CONST	SEGMENT
??_C@_08GJPGANEG@?$CC?$CFs?$CC?5?$CFs?6@ DB '"%s" %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BKFKCFOM@Start?5rejected@
CONST	SEGMENT
??_C@_0P@BKFKCFOM@Start?5rejected@ DB 'Start rejected', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@HJAEGIGO@?$CF08X?9?$CF04X?9?$CF04X?9?$CF02X?$CF02X?9?$CF02X?$CF02@
CONST	SEGMENT
??_C@_0DE@HJAEGIGO@?$CF08X?9?$CF04X?9?$CF04X?9?$CF02X?$CF02X?9?$CF02X?$CF02@ DB '%'
	DB	'08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X ->', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05HKKFJEBI@?$CFS?5?3?5@
CONST	SEGMENT
??_C@_05HKKFJEBI@?$CFS?5?3?5@ DB '%S : ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@PJHILOPO@?$AAC?$AAd?$AAe?$AAL?$AAo?$AAa?$AAd?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn@
CONST	SEGMENT
??_C@_1BM@PJHILOPO@?$AAC?$AAd?$AAe?$AAL?$AAo?$AAa?$AAd?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn@ DB 'C'
	DB	00H, 'd', 00H, 'e', 00H, 'L', 00H, 'o', 00H, 'a', 00H, 'd', 00H
	DB	'O', 00H, 'p', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@IIPPCKN@Y?3?2EDK2020?9MinnowBoard?2CdePkg?2L@
CONST	SEGMENT
??_C@_0EI@IIPPCKN@Y?3?2EDK2020?9MinnowBoard?2CdePkg?2L@ DB 'Y:\EDK2020-Mi'
	DB	'nnowBoard\CdePkg\LoadOptionShell\main.c(%d): num %d -> %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@DOLEJLOO@No?5?$CCCdeLoadOption?$CC?5variable?5fou@
CONST	SEGMENT
??_C@_0CM@DOLEJLOO@No?5?$CCCdeLoadOption?$CC?5variable?5fou@ DB 'No "CdeL'
	DB	'oadOption" variable found in NVRAM', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@MJJBIJIE@?5?5?5?5?1del?5?5?5?5delete?5command?5line@
CONST	SEGMENT
??_C@_0GK@MJJBIJIE@?5?5?5?5?1del?5?5?5?5delete?5command?5line@ DB '    /d'
	DB	'el    delete command line for a driver. The driver is invoked'
	DB	' during POST as an "unknownCdeDriver"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DOKDNGDN@?5?5?5?5?1ena?5?5?5?5enable?5a?5driver?5for@
CONST	SEGMENT
??_C@_0CH@DOKDNGDN@?5?5?5?5?1ena?5?5?5?5enable?5a?5driver?5for@ DB '    /'
	DB	'ena    enable a driver for POST.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@OEHIONND@?5?5?5?5?1dis?5?5?5?5disable?5a?5driver?5du@
CONST	SEGMENT
??_C@_0EO@OEHIONND@?5?5?5?5?1dis?5?5?5?5disable?5a?5driver?5du@ DB '    /'
	DB	'dis    disable a driver during POST. The main() function is n'
	DB	'ot invoked', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@CLNLHKAP@?5?5?5?5?1cmd?5?5?5?5command?5line?5includ@
CONST	SEGMENT
??_C@_0ED@CLNLHKAP@?5?5?5?5?1cmd?5?5?5?5command?5line?5includ@ DB '    /c'
	DB	'md    command line including of program name and parameters', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@GCGNNGGP@?5?5?5?5?1guid?5?5?5FILE_GUID?5of?5the?5PO@
CONST	SEGMENT
??_C@_0CK@GCGNNGGP@?5?5?5?5?1guid?5?5?5FILE_GUID?5of?5the?5PO@ DB '    /g'
	DB	'uid   FILE_GUID of the POST driver', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@FIOANFFL@?5?5?5?5?1list?5?5?5list?5all?5command?5li@
CONST	SEGMENT
??_C@_0DP@FIOANFFL@?5?5?5?5?1list?5?5?5list?5all?5command?5li@ DB '    /l'
	DB	'ist   list all command line reserved for CdePkg drivers', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OIHPKFHL@?5?5?5?5or?6LoadOption?5?1list?6?6@
CONST	SEGMENT
??_C@_0BK@OIHPKFHL@?5?5?5?5or?6LoadOption?5?1list?6?6@ DB '    or', 0aH, 'L'
	DB	'oadOption /list', 0aH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@BCFNMDNB@LoadOption?5?1guid?512345678?90000?9@
CONST	SEGMENT
??_C@_0GB@BCFNMDNB@LoadOption?5?1guid?512345678?90000?9@ DB 'LoadOption /'
	DB	'guid 12345678-0000-1111-2233-445566778899 [/cmd "commandline"'
	DB	'] [/dis] [/ena] [/del]', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HE@JENICHIJ@?6LoadOption?5UEFI?5shell?5tool?5to?5@
CONST	SEGMENT
??_C@_0HE@JENICHIJ@?6LoadOption?5UEFI?5shell?5tool?5to?5@ DB 0aH, 'LoadOp'
	DB	'tion UEFI shell tool to add, modify, disable and delete comma'
	DB	'nd line', 0aH, 'options for CdePkg based POST drivers', 0aH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_05HDIPJJLA@?1help@
CONST	SEGMENT
??_C@_05HDIPJJLA@?1help@ DB '/help', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JOILMGJP@?1h@
CONST	SEGMENT
??_C@_02JOILMGJP@?1h@ DB '/h', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GLHBANAM@?1?$DP@
CONST	SEGMENT
??_C@_02GLHBANAM@?1?$DP@ DB '/?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LPMPKBIB@?1list@
CONST	SEGMENT
??_C@_05LPMPKBIB@?1list@ DB '/list', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IJKDEMEA@?1guid@
CONST	SEGMENT
??_C@_05IJKDEMEA@?1guid@ DB '/guid', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EJFMPNAD@?1del@
CONST	SEGMENT
??_C@_04EJFMPNAD@?1del@ DB '/del', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EIBLALMK@?1ena@
CONST	SEGMENT
??_C@_04EIBLALMK@?1ena@ DB '/ena', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04INBMAKPJ@?1dis@
CONST	SEGMENT
??_C@_04INBMAKPJ@?1dis@ DB '/dis', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BCEBBOAK@?1cmd@
CONST	SEGMENT
??_C@_04BCEBBOAK@?1cmd@ DB '/cmd', 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	0a1d01H
	DD	01b011dH
	DD	0e00ff011H
	DD	0c00bd00dH
	DD	060087009H
	DD	050063007H
xdata	ENDS
; Function compile flags: /Ogspy
; File Y:\EDK2020-MinnowBoard\CdePkg\LoadOptionShell\main.c
;	COMDAT main
_TEXT	SEGMENT
guid$ = 128
iena$1$ = 144
Attributes$ = 148
ilst$1$ = 152
datasize$ = 160
ihlp$1$ = 168
SystemTable$1$ = 176
pNvram$1$ = 184
pBuf$1$ = 192
tv869 = 200
iguid$1$ = 288
tv505 = 288
found$1$ = 288
argc$ = 288
tv509 = 296
VarNameSize$1 = 296
argv$ = 296
idel$1$ = 304
tv511 = 304
tv513 = 312
idis$1$ = 312
main	PROC						; COMDAT

; 43   : int main(int argc, char** argv) {

$LN65:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	53		 push	 rbx
  00007	56		 push	 rsi
  00008	57		 push	 rdi
  00009	41 54		 push	 r12
  0000b	41 55		 push	 r13
  0000d	41 56		 push	 r14
  0000f	41 57		 push	 r15
  00011	48 8d 6c 24 e1	 lea	 rbp, QWORD PTR [rsp-31]
  00016	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0001d	48 8b f2	 mov	 rsi, rdx
  00020	44 8b e1	 mov	 r12d, ecx

; 44   : 
; 45   :     size_t len = argc > 2 ? 1 + strlen(argv[2]) : 0;

  00023	83 f9 02	 cmp	 ecx, 2
  00026	7e 0f		 jle	 SHORT $LN43@main
  00028	48 8b 4a 10	 mov	 rcx, QWORD PTR [rdx+16]
  0002c	e8 00 00 00 00	 call	 strlen
  00031	48 8d 58 01	 lea	 rbx, QWORD PTR [rax+1]
  00035	eb 02		 jmp	 SHORT $LN44@main
$LN43@main:
  00037	33 db		 xor	 ebx, ebx
$LN44@main:

; 46   :     EFI_SYSTEM_TABLE* SystemTable = (EFI_SYSTEM_TABLE*)(argv[-1]);      //SystemTable is passed in argv[-1]

  00039	4c 8b 76 f8	 mov	 r14, QWORD PTR [rsi-8]

; 47   : //    EFI_HANDLE ImageHandle = (void*)(argv[-2]);                         //ImageHandle is passed in argv[-2]
; 48   :     EFI_STATUS Status = EFI_SUCCESS;
; 49   :     EFI_GUID guid;
; 50   :     UINT32 Attributes = EFI_VARIABLE_NON_VOLATILE + EFI_VARIABLE_BOOTSERVICE_ACCESS + EFI_VARIABLE_RUNTIME_ACCESS, * pAttributes = &Attributes;
; 51   :     UINTN datasize = BSIZE;

  0003d	b8 00 10 00 00	 mov	 eax, 4096		; 00001000H

; 52   :     NVRAMCOMMANDLINE* pNvram = malloc(BSIZE);

  00042	8b c8		 mov	 ecx, eax
  00044	4c 89 75 f7	 mov	 QWORD PTR SystemTable$1$[rbp-185], r14
  00048	c7 45 db 07 00
	00 00		 mov	 DWORD PTR Attributes$[rbp-185], 7
  0004f	48 89 45 e7	 mov	 QWORD PTR datasize$[rbp-185], rax
  00053	e8 00 00 00 00	 call	 malloc
  00058	4c 8b f8	 mov	 r15, rax
  0005b	48 89 45 ff	 mov	 QWORD PTR pNvram$1$[rbp-185], rax

; 53   :     NVRAMCOMMANDLINE* pBuf = malloc(sizeof(NVRAMCOMMANDLINE) + len);

  0005f	48 8d 43 04	 lea	 rax, QWORD PTR [rbx+4]
  00063	48 8b c8	 mov	 rcx, rax
  00066	48 89 45 0f	 mov	 QWORD PTR tv869[rbp-185], rax
  0006a	e8 00 00 00 00	 call	 malloc

; 54   :     int n, i;
; 55   :     int nRet = 1;
; 56   :     int icmd = 0, idis = 0, idel = 0, iena = 0, iguid = 0, ilst = 0, ihlp = 0;

  0006f	33 c9		 xor	 ecx, ecx
  00071	48 89 45 07	 mov	 QWORD PTR pBuf$1$[rbp-185], rax
  00075	33 d2		 xor	 edx, edx
  00077	89 4d 7f	 mov	 DWORD PTR idis$1$[rbp-185], ecx
  0007a	45 33 c0	 xor	 r8d, r8d
  0007d	89 55 d7	 mov	 DWORD PTR iena$1$[rbp-185], edx
  00080	45 33 c9	 xor	 r9d, r9d
  00083	44 89 45 67	 mov	 DWORD PTR iguid$1$[rbp-185], r8d
  00087	48 8b d8	 mov	 rbx, rax
  0008a	44 89 4d df	 mov	 DWORD PTR ilst$1$[rbp-185], r9d
  0008e	33 c0		 xor	 eax, eax
  00090	8d 79 01	 lea	 edi, QWORD PTR [rcx+1]
  00093	21 45 ef	 and	 DWORD PTR ihlp$1$[rbp-185], eax
  00096	45 33 ed	 xor	 r13d, r13d
  00099	89 45 77	 mov	 DWORD PTR idel$1$[rbp-185], eax

; 57   : 
; 58   :     do {
; 59   : 
; 60   :         //
; 61   :         // check command line parameters
; 62   :         //
; 63   :         for (i = 1; i < argc; i++) {

  0009c	44 3b e7	 cmp	 r12d, edi
  0009f	0f 8e 1d 01 00
	00		 jle	 $LN57@main
  000a5	48 8d 5e 08	 lea	 rbx, QWORD PTR [rsi+8]
  000a9	44 8b f8	 mov	 r15d, eax
  000ac	8b f0		 mov	 esi, eax
  000ae	44 8b f0	 mov	 r14d, eax
$LL7@main:

; 64   :             if (0 == strcmp("/cmd", argv[i]))

  000b1	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BCEBBOAK@?1cmd@
  000bb	e8 00 00 00 00	 call	 strcmp

; 65   :                 icmd = i;
; 66   :             if (0 == strcmp("/dis", argv[i]))

  000c0	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04INBMAKPJ@?1dis@
  000ca	85 c0		 test	 eax, eax
  000cc	44 0f 44 ef	 cmove	 r13d, edi
  000d0	e8 00 00 00 00	 call	 strcmp

; 67   :                 idis = i;
; 68   :             if (0 == strcmp("/ena", argv[i]))

  000d5	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  000d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04EIBLALMK@?1ena@
  000df	85 c0		 test	 eax, eax
  000e1	44 0f 44 f7	 cmove	 r14d, edi
  000e5	e8 00 00 00 00	 call	 strcmp

; 69   :                 iena = i;
; 70   :             if (0 == strcmp("/del", argv[i]))

  000ea	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04EJFMPNAD@?1del@
  000f4	85 c0		 test	 eax, eax
  000f6	0f 44 f7	 cmove	 esi, edi
  000f9	e8 00 00 00 00	 call	 strcmp

; 71   :                 idel = i;
; 72   :             if (0 == strcmp("/guid", argv[i]))

  000fe	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IJKDEMEA@?1guid@
  00108	85 c0		 test	 eax, eax
  0010a	44 0f 44 ff	 cmove	 r15d, edi
  0010e	e8 00 00 00 00	 call	 strcmp
  00113	8b 4d 67	 mov	 ecx, DWORD PTR iguid$1$[rbp-185]
  00116	85 c0		 test	 eax, eax

; 73   :                 iguid = i;
; 74   :             if (0 == strcmp("/list", argv[i]))

  00118	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  0011b	0f 44 cf	 cmove	 ecx, edi
  0011e	89 4d 67	 mov	 DWORD PTR iguid$1$[rbp-185], ecx
  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LPMPKBIB@?1list@
  00128	e8 00 00 00 00	 call	 strcmp
  0012d	8b 4d df	 mov	 ecx, DWORD PTR ilst$1$[rbp-185]
  00130	85 c0		 test	 eax, eax

; 75   :                 ilst = i;
; 76   :             if ((0 == strcmp("/?", argv[i])) || (0 == strcmp("/h", argv[i])) || (0 == strcmp("/help", argv[i])))

  00132	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00135	0f 44 cf	 cmove	 ecx, edi
  00138	89 4d df	 mov	 DWORD PTR ilst$1$[rbp-185], ecx
  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02GLHBANAM@?1?$DP@
  00142	e8 00 00 00 00	 call	 strcmp
  00147	85 c0		 test	 eax, eax
  00149	74 26		 je	 SHORT $LN18@main
  0014b	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  0014e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02JOILMGJP@?1h@
  00155	e8 00 00 00 00	 call	 strcmp
  0015a	85 c0		 test	 eax, eax
  0015c	74 13		 je	 SHORT $LN18@main
  0015e	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05HDIPJJLA@?1help@
  00168	e8 00 00 00 00	 call	 strcmp
  0016d	85 c0		 test	 eax, eax
  0016f	75 07		 jne	 SHORT $LN56@main
$LN18@main:

; 77   :                 ihlp = i;

  00171	8b c7		 mov	 eax, edi
  00173	89 45 ef	 mov	 DWORD PTR ihlp$1$[rbp-185], eax
  00176	eb 03		 jmp	 SHORT $LN5@main
$LN56@main:

; 75   :                 ilst = i;
; 76   :             if ((0 == strcmp("/?", argv[i])) || (0 == strcmp("/h", argv[i])) || (0 == strcmp("/help", argv[i])))

  00178	8b 45 ef	 mov	 eax, DWORD PTR ihlp$1$[rbp-185]
$LN5@main:

; 57   : 
; 58   :     do {
; 59   : 
; 60   :         //
; 61   :         // check command line parameters
; 62   :         //
; 63   :         for (i = 1; i < argc; i++) {

  0017b	ff c7		 inc	 edi
  0017d	48 83 c3 08	 add	 rbx, 8
  00181	41 3b fc	 cmp	 edi, r12d
  00184	0f 8c 27 ff ff
	ff		 jl	 $LL7@main

; 78   :         }
; 79   : 
; 80   :         if (ihlp || 1 == argc) {

  0018a	33 ff		 xor	 edi, edi
  0018c	89 75 d7	 mov	 DWORD PTR iena$1$[rbp-185], esi
  0018f	48 8b 75 6f	 mov	 rsi, QWORD PTR argv$[rbp-185]
  00193	44 89 75 7f	 mov	 DWORD PTR idis$1$[rbp-185], r14d
  00197	4c 8b 75 f7	 mov	 r14, QWORD PTR SystemTable$1$[rbp-185]
  0019b	44 89 7d 77	 mov	 DWORD PTR idel$1$[rbp-185], r15d
  0019f	4c 8b 7d ff	 mov	 r15, QWORD PTR pNvram$1$[rbp-185]
  001a3	85 c0		 test	 eax, eax
  001a5	0f 85 d2 06 00
	00		 jne	 $LN20@main

; 57   : 
; 58   :     do {
; 59   : 
; 60   :         //
; 61   :         // check command line parameters
; 62   :         //
; 63   :         for (i = 1; i < argc; i++) {

  001ab	48 8b 5d 07	 mov	 rbx, QWORD PTR pBuf$1$[rbp-185]
  001af	8b 45 77	 mov	 eax, DWORD PTR idel$1$[rbp-185]
  001b2	8b 4d 7f	 mov	 ecx, DWORD PTR idis$1$[rbp-185]
  001b5	8b 55 d7	 mov	 edx, DWORD PTR iena$1$[rbp-185]
  001b8	44 8b 45 67	 mov	 r8d, DWORD PTR iguid$1$[rbp-185]
  001bc	44 8b 4d df	 mov	 r9d, DWORD PTR ilst$1$[rbp-185]
  001c0	eb 02		 jmp	 SHORT $LN55@main
$LN57@main:
  001c2	33 ff		 xor	 edi, edi
$LN55@main:

; 78   :         }
; 79   : 
; 80   :         if (ihlp || 1 == argc) {

  001c4	41 83 fc 01	 cmp	 r12d, 1
  001c8	0f 84 af 06 00
	00		 je	 $LN20@main

; 90   :             break;
; 91   :         }
; 92   : 
; 93   :         if (0 != ilst) {

  001ce	45 85 c9	 test	 r9d, r9d
  001d1	0f 84 c8 01 00
	00		 je	 $LN21@main

; 94   :             char fPrint = 0;
; 95   :             wchar_t* pVarName = malloc(BSIZE);

  001d7	be 00 10 00 00	 mov	 esi, 4096		; 00001000H
  001dc	8b ce		 mov	 ecx, esi
  001de	e8 00 00 00 00	 call	 malloc

; 96   :             size_t VarNameSize = BSIZE;
; 97   :             int num = 0, found = 0;
; 98   : 
; 99   :             memset(&guid, 0, sizeof(guid));

  001e3	33 d2		 xor	 edx, edx
  001e5	48 8d 4d c7	 lea	 rcx, QWORD PTR guid$[rbp-185]
  001e9	4c 8b e0	 mov	 r12, rax
  001ec	44 8b ef	 mov	 r13d, edi
  001ef	8b df		 mov	 ebx, edi
  001f1	44 8d 42 10	 lea	 r8d, QWORD PTR [rdx+16]
  001f5	e8 00 00 00 00	 call	 memset

; 100  : 
; 101  :             wcscpy(pVarName, L"");

  001fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
  00201	49 8b cc	 mov	 rcx, r12
  00204	e8 00 00 00 00	 call	 wcscpy
$LL10@main:

; 102  :             do {
; 103  : 
; 104  : 
; 105  :                 VarNameSize = BSIZE;
; 106  : 
; 107  :                 Status = SystemTable->RuntimeServices->GetNextVariableName(

  00209	49 8b 46 58	 mov	 rax, QWORD PTR [r14+88]
  0020d	4c 8d 45 c7	 lea	 r8, QWORD PTR guid$[rbp-185]
  00211	49 8b d4	 mov	 rdx, r12
  00214	48 89 75 6f	 mov	 QWORD PTR VarNameSize$1[rbp-185], rsi
  00218	48 8d 4d 6f	 lea	 rcx, QWORD PTR VarNameSize$1[rbp-185]
  0021c	ff 50 50	 call	 QWORD PTR [rax+80]

; 108  :                     &VarNameSize,
; 109  :                     pVarName,
; 110  :                     &guid
; 111  :                 );
; 112  : 
; 113  :                 if ((Status == EFI_NOT_FOUND)) {

  0021f	48 b9 0e 00 00
	00 00 00 00 80	 mov	 rcx, -9223372036854775794 ; 800000000000000eH
  00229	48 3b c1	 cmp	 rax, rcx
  0022c	0f 84 31 01 00
	00		 je	 $LN47@main

; 116  :                     }
; 117  :                     break;
; 118  :                 }
; 119  : 
; 120  :                 if ((Status != EFI_SUCCESS)) {

  00232	48 85 c0	 test	 rax, rax
  00235	0f 85 f4 00 00
	00		 jne	 $LN48@main

; 122  :                     break;
; 123  :                 }
; 124  : 
; 125  :                 num++;
; 126  : 
; 127  :                 //if (len) {
; 128  :                 fPrint = !wcscmp(pVarName, L"CdeLoadOption");

  0023b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@PJHILOPO@?$AAC?$AAd?$AAe?$AAL?$AAo?$AAa?$AAd?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn@
  00242	49 8b cc	 mov	 rcx, r12
  00245	41 ff c5	 inc	 r13d
  00248	e8 00 00 00 00	 call	 wcscmp
  0024d	8b c8		 mov	 ecx, eax

; 129  :                 found = found + fPrint;

  0024f	8b c7		 mov	 eax, edi
  00251	85 c9		 test	 ecx, ecx
  00253	0f 94 c0	 sete	 al
  00256	03 d8		 add	 ebx, eax
  00258	89 5d 67	 mov	 DWORD PTR found$1$[rbp-185], ebx

; 130  :                 //    //printf(__FILE__"(%d): ""%S vs. %S, len == %d, fPrint == %d\n", __LINE__, pVarName2, pVarName, len, fPrint);
; 131  :                 //}
; 132  :                 //else {
; 133  :                 //    fPrint = 1;
; 134  :                 //}
; 135  : 
; 136  :                 if (Status == EFI_SUCCESS && fPrint == 1) {

  0025b	85 c9		 test	 ecx, ecx
  0025d	75 aa		 jne	 SHORT $LL10@main

; 137  :                     pVarName[VarNameSize] = '\0';

  0025f	48 8b 45 6f	 mov	 rax, QWORD PTR VarNameSize$1[rbp-185]

; 138  :                     printf("%S : ", pVarName);

  00263	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05HKKFJEBI@?$CFS?5?3?5@
  0026a	49 8b d4	 mov	 rdx, r12
  0026d	66 41 89 3c 44	 mov	 WORD PTR [r12+rax*2], di
  00272	e8 00 00 00 00	 call	 printf

; 139  :                     printf("%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X ->",

  00277	0f b6 4d d5	 movzx	 ecx, BYTE PTR guid$[rbp-171]
  0027b	0f b6 55 d4	 movzx	 edx, BYTE PTR guid$[rbp-172]
  0027f	0f b6 45 d6	 movzx	 eax, BYTE PTR guid$[rbp-170]
  00283	44 0f b6 55 d3	 movzx	 r10d, BYTE PTR guid$[rbp-173]
  00288	44 0f b6 5d d2	 movzx	 r11d, BYTE PTR guid$[rbp-174]
  0028d	0f b6 5d d1	 movzx	 ebx, BYTE PTR guid$[rbp-175]
  00291	0f b6 7d d0	 movzx	 edi, BYTE PTR guid$[rbp-176]
  00295	0f b6 75 cf	 movzx	 esi, BYTE PTR guid$[rbp-177]
  00299	44 0f b7 4d cd	 movzx	 r9d, WORD PTR guid$[rbp-179]
  0029e	44 0f b7 45 cb	 movzx	 r8d, WORD PTR guid$[rbp-181]
  002a3	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  002a7	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  002ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DE@HJAEGIGO@?$CF08X?9?$CF04X?9?$CF04X?9?$CF02X?$CF02X?9?$CF02X?$CF02@
  002b2	89 54 24 48	 mov	 DWORD PTR [rsp+72], edx
  002b6	8b 55 c7	 mov	 edx, DWORD PTR guid$[rbp-185]
  002b9	44 89 54 24 40	 mov	 DWORD PTR [rsp+64], r10d
  002be	44 89 5c 24 38	 mov	 DWORD PTR [rsp+56], r11d
  002c3	89 5c 24 30	 mov	 DWORD PTR [rsp+48], ebx
  002c7	89 7c 24 28	 mov	 DWORD PTR [rsp+40], edi
  002cb	89 74 24 20	 mov	 DWORD PTR [rsp+32], esi
  002cf	e8 00 00 00 00	 call	 printf

; 140  :                         guid.Data1,
; 141  :                         guid.Data2,
; 142  :                         guid.Data3,
; 143  :                         guid.Data4[0],
; 144  :                         guid.Data4[1],
; 145  :                         guid.Data4[2],
; 146  :                         guid.Data4[3],
; 147  :                         guid.Data4[4],
; 148  :                         guid.Data4[5],
; 149  :                         guid.Data4[6],
; 150  :                         guid.Data4[7]);
; 151  : 
; 152  :                     datasize = BSIZE;

  002d4	be 00 10 00 00	 mov	 esi, 4096		; 00001000H

; 153  :                     Status = SystemTable->RuntimeServices->GetVariable(

  002d9	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  002de	48 89 75 e7	 mov	 QWORD PTR datasize$[rbp-185], rsi
  002e2	4c 8d 4d e7	 lea	 r9, QWORD PTR datasize$[rbp-185]
  002e6	49 8b 46 58	 mov	 rax, QWORD PTR [r14+88]
  002ea	48 8d 55 c7	 lea	 rdx, QWORD PTR guid$[rbp-185]
  002ee	45 33 c0	 xor	 r8d, r8d
  002f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@PJHILOPO@?$AAC?$AAd?$AAe?$AAL?$AAo?$AAa?$AAd?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn@
  002f8	ff 50 48	 call	 QWORD PTR [rax+72]

; 154  :                         L"CdeLoadOption"    /* IN CHAR16 * VariableName */,
; 155  :                         &guid               /* IN EFI_GUID * VendorGuid */,
; 156  :                         NULL                /* OUT UINT32 * Attributes OPTIONAL*/,
; 157  :                         &datasize           /* IN OUT UINTN * DataSize */,
; 158  :                         pNvram              /* OUT VOID * Data OPTIONAL*/
; 159  :                     );
; 160  : 
; 161  :                     //fprintf(stderr, __FILE__"%d): ""%s\n", __LINE__, strefierror(Status));
; 162  : 
; 163  :                     if (EFI_SUCCESS == Status) {

  002fb	33 ff		 xor	 edi, edi
  002fd	48 85 c0	 test	 rax, rax
  00300	75 71		 jne	 SHORT $LN9@main

; 164  :                         printf("\"%s\" %s\n", pNvram->CommandLine, pNvram->rejectStart ? "Start rejected" : "");

  00302	41 39 3f	 cmp	 DWORD PTR [r15], edi
  00305	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0P@BKFKCFOM@Start?5rejected@
  0030c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@@
  00313	4c 0f 45 c0	 cmovne	 r8, rax
  00317	49 8d 57 04	 lea	 rdx, QWORD PTR [r15+4]
  0031b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08GJPGANEG@?$CC?$CFs?$CC?5?$CFs?6@
  00322	e8 00 00 00 00	 call	 printf

; 165  :                     }
; 166  : 
; 167  :                 }
; 168  :             } while (Status == EFI_SUCCESS);

  00327	8b 5d 67	 mov	 ebx, DWORD PTR found$1$[rbp-185]
  0032a	e9 da fe ff ff	 jmp	 $LL10@main
$LN48@main:

; 121  :                     fprintf(stderr, __FILE__"(%d): ""num %d -> %s\n", __LINE__, num, strefierror(Status));

  0032f	48 8b c8	 mov	 rcx, rax
  00332	e8 00 00 00 00	 call	 strefierror
  00337	b9 02 00 00 00	 mov	 ecx, 2
  0033c	48 8b d8	 mov	 rbx, rax
  0033f	e8 00 00 00 00	 call	 __acrt_iob_func
  00344	48 8b c8	 mov	 rcx, rax
  00347	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  0034c	45 8b cd	 mov	 r9d, r13d
  0034f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EI@IIPPCKN@Y?3?2EDK2020?9MinnowBoard?2CdePkg?2L@
  00356	41 b8 79 00 00
	00		 mov	 r8d, 121		; 00000079H
  0035c	e8 00 00 00 00	 call	 fprintf
  00361	eb 10		 jmp	 SHORT $LN9@main
$LN47@main:

; 114  :                     if (0 == found) {

  00363	85 db		 test	 ebx, ebx
  00365	75 0c		 jne	 SHORT $LN9@main

; 115  :                         printf("No \"CdeLoadOption\" variable found in NVRAM\n");

  00367	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@DOLEJLOO@No?5?$CCCdeLoadOption?$CC?5variable?5fou@
  0036e	e8 00 00 00 00	 call	 printf
$LN9@main:

; 169  : 
; 170  :             if (num == 0) {

  00373	45 85 ed	 test	 r13d, r13d
  00376	0f 85 6d 05 00
	00		 jne	 $LN3@main

; 171  :                 fprintf(stderr, __FILE__"(%d): ""\"CdeLoadOption\" NVRAM variable not found\n", __LINE__);

  0037c	41 8d 4d 02	 lea	 ecx, QWORD PTR [r13+2]
  00380	e8 00 00 00 00	 call	 __acrt_iob_func
  00385	48 8b c8	 mov	 rcx, rax
  00388	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GE@LBPHLFLG@Y?3?2EDK2020?9MinnowBoard?2CdePkg?2L@
  0038f	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  00395	e8 00 00 00 00	 call	 fprintf

; 172  :             }
; 173  :             break;

  0039a	e9 4a 05 00 00	 jmp	 $LN3@main
$LN21@main:

; 174  :         }
; 175  :         //
; 176  :         // check command line parameters
; 177  :         //
; 178  :         if (0 == iguid) {

  0039f	45 85 c0	 test	 r8d, r8d
  003a2	75 1d		 jne	 SHORT $LN28@main

; 179  :             fprintf(stderr, "MISSING parameter: /guid 12345678-AAAA-BBBB-CCDD-112233445566\n");

  003a4	41 8d 48 02	 lea	 ecx, QWORD PTR [r8+2]
  003a8	e8 00 00 00 00	 call	 __acrt_iob_func
  003ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DP@GMEAEDPA@MISSING?5parameter?3?5?1guid?5123456@
$LN61@main:

; 347  : 
; 348  :         }
; 349  :     } while (0);
; 350  : 
; 351  :     return nRet;

  003b4	48 8b c8	 mov	 rcx, rax
  003b7	e8 00 00 00 00	 call	 fprintf
  003bc	e9 28 05 00 00	 jmp	 $LN3@main
$LN28@main:

; 180  :             break;
; 181  :         }
; 182  : 
; 183  :         if (0 == icmd && 0 == idis && 0 == idel && 0 == iena) {

  003c1	45 85 ed	 test	 r13d, r13d
  003c4	75 61		 jne	 SHORT $LN29@main
  003c6	85 c9		 test	 ecx, ecx
  003c8	75 5d		 jne	 SHORT $LN29@main
  003ca	85 c0		 test	 eax, eax
  003cc	75 59		 jne	 SHORT $LN29@main
  003ce	85 d2		 test	 edx, edx
  003d0	75 55		 jne	 SHORT $LN29@main

; 184  :             fprintf(stderr, "MISSING parameter: /cmd \"drivername parm1 parm2\"\n");

  003d2	8d 59 02	 lea	 ebx, QWORD PTR [rcx+2]
  003d5	8b cb		 mov	 ecx, ebx
  003d7	e8 00 00 00 00	 call	 __acrt_iob_func
  003dc	48 8b c8	 mov	 rcx, rax
  003df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@BCAHIDON@MISSING?5parameter?3?5?1cmd?5?$CCdriver@
  003e6	e8 00 00 00 00	 call	 fprintf

; 185  :             fprintf(stderr, "                   /dis\n");

  003eb	8b cb		 mov	 ecx, ebx
  003ed	e8 00 00 00 00	 call	 __acrt_iob_func
  003f2	48 8b c8	 mov	 rcx, rax
  003f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@POPDEOLM@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?1dis?6@
  003fc	e8 00 00 00 00	 call	 fprintf

; 186  :             fprintf(stderr, "                   /ena\n");

  00401	8b cb		 mov	 ecx, ebx
  00403	e8 00 00 00 00	 call	 __acrt_iob_func
  00408	48 8b c8	 mov	 rcx, rax
  0040b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@EBOGCIKL@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?1ena?6@
  00412	e8 00 00 00 00	 call	 fprintf

; 187  :             fprintf(stderr, "                   /del\n");

  00417	8b cb		 mov	 ecx, ebx
  00419	e8 00 00 00 00	 call	 __acrt_iob_func
  0041e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@KDFPBFEJ@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?1del?6@

; 188  :             break;

  00425	eb 8d		 jmp	 SHORT $LN61@main
$LN29@main:

; 189  :         }
; 190  : 
; 191  :         memset(&guid, 0, sizeof(guid));

  00427	33 d2		 xor	 edx, edx
  00429	48 8d 4d c7	 lea	 rcx, QWORD PTR guid$[rbp-185]
  0042d	44 8d 42 10	 lea	 r8d, QWORD PTR [rdx+16]
  00431	e8 00 00 00 00	 call	 memset

; 192  : 
; 193  :         //
; 194  :         // get and test the guid passed after /guid command line parameter
; 195  :         //
; 196  :         n = sscanf(argv[iguid + 1], "%8x-%4hx-%4hx-%2hhx%2hhx-%2hhx%2hhx%2hhx%2hhx%2hhx%2hhx",

  00436	48 63 4d 67	 movsxd	 rcx, DWORD PTR iguid$1$[rbp-185]
  0043a	48 8d 45 d6	 lea	 rax, QWORD PTR guid$[rbp-170]
  0043e	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  00443	4c 8d 4d cb	 lea	 r9, QWORD PTR guid$[rbp-181]
  00447	48 8d 45 d5	 lea	 rax, QWORD PTR guid$[rbp-171]
  0044b	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  00450	4c 8d 45 c7	 lea	 r8, QWORD PTR guid$[rbp-185]
  00454	48 8b 4c ce 08	 mov	 rcx, QWORD PTR [rsi+rcx*8+8]
  00459	48 8d 45 d4	 lea	 rax, QWORD PTR guid$[rbp-172]
  0045d	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00462	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@IDKFPMOM@?$CF8x?9?$CF4hx?9?$CF4hx?9?$CF2hhx?$CF2hhx?9?$CF2hhx?$CF@
  00469	48 8d 45 d3	 lea	 rax, QWORD PTR guid$[rbp-173]
  0046d	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00472	48 8d 45 d2	 lea	 rax, QWORD PTR guid$[rbp-174]
  00476	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0047b	48 8d 45 d1	 lea	 rax, QWORD PTR guid$[rbp-175]
  0047f	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00484	48 8d 45 d0	 lea	 rax, QWORD PTR guid$[rbp-176]
  00488	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0048d	48 8d 45 cf	 lea	 rax, QWORD PTR guid$[rbp-177]
  00491	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00496	48 8d 45 cd	 lea	 rax, QWORD PTR guid$[rbp-179]
  0049a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0049f	e8 00 00 00 00	 call	 sscanf

; 197  :             &guid.Data1,
; 198  :             &guid.Data2,
; 199  :             &guid.Data3,
; 200  :             &guid.Data4[0],
; 201  :             &guid.Data4[1],
; 202  :             &guid.Data4[2],
; 203  :             &guid.Data4[3],
; 204  :             &guid.Data4[4],
; 205  :             &guid.Data4[5],
; 206  :             &guid.Data4[6],
; 207  :             &guid.Data4[7]);
; 208  :         if (11 != n) {

  004a4	83 f8 0b	 cmp	 eax, 11
  004a7	74 16		 je	 SHORT $LN30@main

; 209  :             fprintf(stderr, "Invalid GUID format\nUse: 11111111-2222-3333-4455-66778899AABB\n");

  004a9	b9 02 00 00 00	 mov	 ecx, 2
  004ae	e8 00 00 00 00	 call	 __acrt_iob_func
  004b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DP@KIJGPBKJ@Invalid?5GUID?5format?6Use?3?5111111@

; 210  :             break;

  004ba	e9 f5 fe ff ff	 jmp	 $LN61@main
$LN30@main:

; 211  :         }
; 212  : 
; 213  :         //
; 214  :         // /del - delete NVRAM variable
; 215  :         //
; 216  :         if (idel) {

  004bf	39 7d 77	 cmp	 DWORD PTR idel$1$[rbp-185], edi
  004c2	74 59		 je	 SHORT $LN31@main

; 217  :             Status = SystemTable->RuntimeServices->SetVariable(

  004c4	49 8b 46 58	 mov	 rax, QWORD PTR [r14+88]
  004c8	48 8d 55 c7	 lea	 rdx, QWORD PTR guid$[rbp-185]
  004cc	45 33 c9	 xor	 r9d, r9d
  004cf	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  004d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@PJHILOPO@?$AAC?$AAd?$AAe?$AAL?$AAo?$AAa?$AAd?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn@
  004db	45 8d 41 07	 lea	 r8d, QWORD PTR [r9+7]
  004df	ff 50 58	 call	 QWORD PTR [rax+88]

; 218  :                 L"CdeLoadOption",
; 219  :                 &guid,
; 220  :                 EFI_VARIABLE_NON_VOLATILE + EFI_VARIABLE_BOOTSERVICE_ACCESS + EFI_VARIABLE_RUNTIME_ACCESS,
; 221  :                 0,
; 222  :                 NULL
; 223  :             );
; 224  : 
; 225  :             if (Status != EFI_SUCCESS)

  004e2	48 85 c0	 test	 rax, rax
  004e5	0f 84 fe 03 00
	00		 je	 $LN3@main

; 226  :                 fprintf(stderr, __FILE__"(%d): ""%s\n", __LINE__, strefierror(Status));

  004eb	48 8b c8	 mov	 rcx, rax
  004ee	e8 00 00 00 00	 call	 strefierror
  004f3	b9 02 00 00 00	 mov	 ecx, 2
  004f8	48 8b d8	 mov	 rbx, rax
  004fb	e8 00 00 00 00	 call	 __acrt_iob_func
  00500	41 b8 e2 00 00
	00		 mov	 r8d, 226		; 000000e2H
$LN62@main:

; 347  : 
; 348  :         }
; 349  :     } while (0);
; 350  : 
; 351  :     return nRet;

  00506	4c 8b cb	 mov	 r9, rbx
  00509	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DO@PLPJPJHG@Y?3?2EDK2020?9MinnowBoard?2CdePkg?2L@
  00510	48 8b c8	 mov	 rcx, rax
  00513	e8 00 00 00 00	 call	 fprintf
  00518	e9 cc 03 00 00	 jmp	 $LN3@main
$LN31@main:

; 227  :             break;
; 228  :         }
; 229  : 
; 230  :         //
; 231  :         // /dis - disable (set rejectStart flag)
; 232  :         //
; 233  :         if (idis) {

  0051d	39 7d 7f	 cmp	 DWORD PTR idis$1$[rbp-185], edi
  00520	0f 84 fd 00 00
	00		 je	 $LN33@main

; 234  : 
; 235  :             datasize = BSIZE;
; 236  :             pNvram = realloc(pNvram, BSIZE);

  00526	ba 00 10 00 00	 mov	 edx, 4096		; 00001000H
  0052b	49 8b cf	 mov	 rcx, r15
  0052e	e8 00 00 00 00	 call	 realloc
  00533	48 8b d8	 mov	 rbx, rax

; 237  : 
; 238  :             Status = SystemTable->RuntimeServices->GetVariable(

  00536	4c 8d 4d e7	 lea	 r9, QWORD PTR datasize$[rbp-185]
  0053a	49 8b 46 58	 mov	 rax, QWORD PTR [r14+88]
  0053e	4c 8d 45 db	 lea	 r8, QWORD PTR Attributes$[rbp-185]
  00542	48 8d 55 c7	 lea	 rdx, QWORD PTR guid$[rbp-185]
  00546	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  0054b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@PJHILOPO@?$AAC?$AAd?$AAe?$AAL?$AAo?$AAa?$AAd?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn@
  00552	ff 50 48	 call	 QWORD PTR [rax+72]

; 239  :                 L"CdeLoadOption"   /* IN CHAR16 * VariableName */,
; 240  :                 &guid               /* IN EFI_GUID * VendorGuid */,
; 241  :                 pAttributes         /* OUT UINT32 * Attributes OPTIONAL*/,
; 242  :                 &datasize           /* IN OUT UINTN * DataSize */,
; 243  :                 pNvram              /* OUT VOID * Data OPTIONAL*/
; 244  :             );
; 245  : 
; 246  :             if (Status != EFI_SUCCESS) {

  00555	48 85 c0	 test	 rax, rax
  00558	74 1d		 je	 SHORT $LN34@main

; 247  :                 fprintf(stderr, __FILE__"(%d): ""%s\n", __LINE__, strefierror(Status));

  0055a	48 8b c8	 mov	 rcx, rax
  0055d	e8 00 00 00 00	 call	 strefierror
  00562	b9 02 00 00 00	 mov	 ecx, 2
  00567	48 8b d8	 mov	 rbx, rax
  0056a	e8 00 00 00 00	 call	 __acrt_iob_func
  0056f	41 b8 f7 00 00
	00		 mov	 r8d, 247		; 000000f7H

; 248  :                 break;

  00575	eb 8f		 jmp	 SHORT $LN62@main
$LN34@main:

; 249  :             }
; 250  : 
; 251  :             pNvram->rejectStart = 1;    // set disable flag

  00577	c7 03 01 00 00
	00		 mov	 DWORD PTR [rbx], 1

; 252  : 
; 253  :             Status = SystemTable->RuntimeServices->SetVariable(

  0057d	48 8d 55 c7	 lea	 rdx, QWORD PTR guid$[rbp-185]
  00581	49 8b 46 58	 mov	 rax, QWORD PTR [r14+88]
  00585	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@PJHILOPO@?$AAC?$AAd?$AAe?$AAL?$AAo?$AAa?$AAd?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn@
  0058c	4c 8b 4d e7	 mov	 r9, QWORD PTR datasize$[rbp-185]
  00590	44 8b 45 db	 mov	 r8d, DWORD PTR Attributes$[rbp-185]
  00594	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00599	ff 50 58	 call	 QWORD PTR [rax+88]

; 254  :                 L"CdeLoadOption"    /* IN CHAR16* VariableName */,
; 255  :                 &guid               /* IN EFI_GUID* VendorGuid */,
; 256  :                 *pAttributes         /* IN UINT32 Attributes */,
; 257  :                 datasize            /* IN UINTN DataSize */,
; 258  :                 pNvram              /* IN VOID* Data */
; 259  :             );
; 260  :             if (Status != EFI_SUCCESS) {

  0059c	48 85 c0	 test	 rax, rax
  0059f	74 20		 je	 SHORT $LN35@main

; 261  :                 fprintf(stderr, __FILE__"(%d): ""%s\n", __LINE__, strefierror(Status));

  005a1	48 8b c8	 mov	 rcx, rax
  005a4	e8 00 00 00 00	 call	 strefierror
  005a9	b9 02 00 00 00	 mov	 ecx, 2
  005ae	48 8b d8	 mov	 rbx, rax
  005b1	e8 00 00 00 00	 call	 __acrt_iob_func
  005b6	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H

; 262  :                 break;

  005bc	e9 45 ff ff ff	 jmp	 $LN62@main
$LN35@main:

; 263  :             }
; 264  :             printf("CdeLoadOption : %08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X successfully DISABLED\n", guid.Data1, guid.Data2, guid.Data3, guid.Data4[0], guid.Data4[1], guid.Data4[2], guid.Data4[3], guid.Data4[4], guid.Data4[5], guid.Data4[6], guid.Data4[7]);

  005c1	0f b6 4d d5	 movzx	 ecx, BYTE PTR guid$[rbp-171]
  005c5	0f b6 45 d6	 movzx	 eax, BYTE PTR guid$[rbp-170]
  005c9	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  005cd	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  005d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FI@CKPHOOAH@CdeLoadOption?5?3?5?$CF08X?9?$CF04X?9?$CF04X?9@
$LN63@main:

; 347  : 
; 348  :         }
; 349  :     } while (0);
; 350  : 
; 351  :     return nRet;

  005d8	0f b6 55 d4	 movzx	 edx, BYTE PTR guid$[rbp-172]
  005dc	44 0f b6 55 d3	 movzx	 r10d, BYTE PTR guid$[rbp-173]
  005e1	44 0f b6 5d d2	 movzx	 r11d, BYTE PTR guid$[rbp-174]
  005e6	0f b6 5d d1	 movzx	 ebx, BYTE PTR guid$[rbp-175]
  005ea	0f b6 7d d0	 movzx	 edi, BYTE PTR guid$[rbp-176]
  005ee	0f b6 75 cf	 movzx	 esi, BYTE PTR guid$[rbp-177]
  005f2	44 0f b7 45 cb	 movzx	 r8d, WORD PTR guid$[rbp-181]
  005f7	44 0f b7 4d cd	 movzx	 r9d, WORD PTR guid$[rbp-179]
  005fc	89 54 24 48	 mov	 DWORD PTR [rsp+72], edx
  00600	8b 55 c7	 mov	 edx, DWORD PTR guid$[rbp-185]
  00603	44 89 54 24 40	 mov	 DWORD PTR [rsp+64], r10d
  00608	44 89 5c 24 38	 mov	 DWORD PTR [rsp+56], r11d
  0060d	89 5c 24 30	 mov	 DWORD PTR [rsp+48], ebx
  00611	89 7c 24 28	 mov	 DWORD PTR [rsp+40], edi
  00615	89 74 24 20	 mov	 DWORD PTR [rsp+32], esi
  00619	e8 00 00 00 00	 call	 printf
  0061e	e9 c6 02 00 00	 jmp	 $LN3@main
$LN33@main:

; 265  :             break;
; 266  : 
; 267  :         }
; 268  : 
; 269  :         //
; 270  :         // /ena - enable (clear rejectStart flag)
; 271  :         //
; 272  :         if (iena) {

  00623	39 7d d7	 cmp	 DWORD PTR iena$1$[rbp-185], edi
  00626	0f 84 b6 00 00
	00		 je	 $LN36@main

; 273  : 
; 274  :             datasize = BSIZE;
; 275  :             pNvram = realloc(pNvram, BSIZE);

  0062c	ba 00 10 00 00	 mov	 edx, 4096		; 00001000H
  00631	49 8b cf	 mov	 rcx, r15
  00634	e8 00 00 00 00	 call	 realloc
  00639	48 8b d8	 mov	 rbx, rax

; 276  : 
; 277  :             Status = SystemTable->RuntimeServices->GetVariable(

  0063c	4c 8d 4d e7	 lea	 r9, QWORD PTR datasize$[rbp-185]
  00640	49 8b 46 58	 mov	 rax, QWORD PTR [r14+88]
  00644	4c 8d 45 db	 lea	 r8, QWORD PTR Attributes$[rbp-185]
  00648	48 8d 55 c7	 lea	 rdx, QWORD PTR guid$[rbp-185]
  0064c	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00651	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@PJHILOPO@?$AAC?$AAd?$AAe?$AAL?$AAo?$AAa?$AAd?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn@
  00658	ff 50 48	 call	 QWORD PTR [rax+72]

; 278  :                 L"CdeLoadOption"   /* IN CHAR16 * VariableName */,
; 279  :                 &guid               /* IN EFI_GUID * VendorGuid */,
; 280  :                 pAttributes         /* OUT UINT32 * Attributes OPTIONAL*/,
; 281  :                 &datasize           /* IN OUT UINTN * DataSize */,
; 282  :                 pNvram              /* OUT VOID * Data OPTIONAL*/
; 283  :             );
; 284  : 
; 285  :             if (Status != EFI_SUCCESS) {

  0065b	48 85 c0	 test	 rax, rax
  0065e	74 20		 je	 SHORT $LN37@main

; 286  :                 fprintf(stderr, __FILE__"(%d): ""%s\n", __LINE__, strefierror(Status));

  00660	48 8b c8	 mov	 rcx, rax
  00663	e8 00 00 00 00	 call	 strefierror
  00668	b9 02 00 00 00	 mov	 ecx, 2
  0066d	48 8b d8	 mov	 rbx, rax
  00670	e8 00 00 00 00	 call	 __acrt_iob_func
  00675	41 b8 1e 01 00
	00		 mov	 r8d, 286		; 0000011eH

; 287  :                 break;

  0067b	e9 86 fe ff ff	 jmp	 $LN62@main
$LN37@main:

; 288  :             }
; 289  : 
; 290  :             pNvram->rejectStart = 0;    // set disable flag

  00680	89 3b		 mov	 DWORD PTR [rbx], edi

; 291  : 
; 292  :             Status = SystemTable->RuntimeServices->SetVariable(

  00682	48 8d 55 c7	 lea	 rdx, QWORD PTR guid$[rbp-185]
  00686	49 8b 46 58	 mov	 rax, QWORD PTR [r14+88]
  0068a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@PJHILOPO@?$AAC?$AAd?$AAe?$AAL?$AAo?$AAa?$AAd?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn@
  00691	4c 8b 4d e7	 mov	 r9, QWORD PTR datasize$[rbp-185]
  00695	44 8b 45 db	 mov	 r8d, DWORD PTR Attributes$[rbp-185]
  00699	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  0069e	ff 50 58	 call	 QWORD PTR [rax+88]

; 293  :                 L"CdeLoadOption"    /* IN CHAR16* VariableName */,
; 294  :                 &guid               /* IN EFI_GUID* VendorGuid */,
; 295  :                 *pAttributes        /* IN UINT32 Attributes */,
; 296  :                 datasize            /* IN UINTN DataSize */,
; 297  :                 pNvram              /* IN VOID* Data */
; 298  :             );
; 299  : 
; 300  :             if (Status != EFI_SUCCESS) {

  006a1	48 85 c0	 test	 rax, rax
  006a4	74 20		 je	 SHORT $LN38@main

; 301  :                 fprintf(stderr, __FILE__"(%d): ""%s\n", __LINE__, strefierror(Status));

  006a6	48 8b c8	 mov	 rcx, rax
  006a9	e8 00 00 00 00	 call	 strefierror
  006ae	b9 02 00 00 00	 mov	 ecx, 2
  006b3	48 8b d8	 mov	 rbx, rax
  006b6	e8 00 00 00 00	 call	 __acrt_iob_func
  006bb	41 b8 2d 01 00
	00		 mov	 r8d, 301		; 0000012dH

; 302  :                 break;

  006c1	e9 40 fe ff ff	 jmp	 $LN62@main
$LN38@main:

; 303  :             }
; 304  :             printf("CdeLoadOption : %08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X successfully ENABLED\n", guid.Data1, guid.Data2, guid.Data3, guid.Data4[0], guid.Data4[1], guid.Data4[2], guid.Data4[3], guid.Data4[4], guid.Data4[5], guid.Data4[6], guid.Data4[7]);

  006c6	0f b6 4d d5	 movzx	 ecx, BYTE PTR guid$[rbp-171]
  006ca	0f b6 45 d6	 movzx	 eax, BYTE PTR guid$[rbp-170]
  006ce	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  006d2	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  006d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FH@LOHLGBKB@CdeLoadOption?5?3?5?$CF08X?9?$CF04X?9?$CF04X?9@

; 305  :             break;

  006dd	e9 f6 fe ff ff	 jmp	 $LN63@main
$LN36@main:

; 306  :         }
; 307  : 
; 308  :         //
; 309  :         // /cmd the command line passed to the driver "drivername parm1 parm2"
; 310  :         //
; 311  :         if (icmd) {

  006e2	45 85 ed	 test	 r13d, r13d
  006e5	0f 84 fe 01 00
	00		 je	 $LN3@main

; 312  : 
; 313  :             pBuf->rejectStart = (0 != idis);

  006eb	89 3b		 mov	 DWORD PTR [rbx], edi

; 314  : 
; 315  :             strcpy(pBuf->CommandLine, argv[icmd + 1]);

  006ed	48 8d 4b 04	 lea	 rcx, QWORD PTR [rbx+4]
  006f1	49 63 d5	 movsxd	 rdx, r13d
  006f4	48 8b 54 d6 08	 mov	 rdx, QWORD PTR [rsi+rdx*8+8]
  006f9	e8 00 00 00 00	 call	 strcpy

; 316  : 
; 317  :             Status = SystemTable->RuntimeServices->SetVariable(

  006fe	49 8b 46 58	 mov	 rax, QWORD PTR [r14+88]
  00702	48 8d 55 c7	 lea	 rdx, QWORD PTR guid$[rbp-185]
  00706	4c 8b 4d 0f	 mov	 r9, QWORD PTR tv869[rbp-185]
  0070a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@PJHILOPO@?$AAC?$AAd?$AAe?$AAL?$AAo?$AAa?$AAd?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn@
  00711	41 b8 07 00 00
	00		 mov	 r8d, 7
  00717	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  0071c	ff 50 58	 call	 QWORD PTR [rax+88]

; 318  :                 L"CdeLoadOption",
; 319  :                 &guid,
; 320  :                 EFI_VARIABLE_NON_VOLATILE + EFI_VARIABLE_BOOTSERVICE_ACCESS + EFI_VARIABLE_RUNTIME_ACCESS,
; 321  :                 sizeof(NVRAMCOMMANDLINE) + len,
; 322  :                 pBuf
; 323  :             );
; 324  : 
; 325  :             if (Status != EFI_SUCCESS) {

  0071f	48 85 c0	 test	 rax, rax
  00722	74 20		 je	 SHORT $LN40@main

; 326  :                 fprintf(stderr, __FILE__"(%d): ""%s\n", __LINE__, strefierror(Status));

  00724	48 8b c8	 mov	 rcx, rax
  00727	e8 00 00 00 00	 call	 strefierror
  0072c	b9 02 00 00 00	 mov	 ecx, 2
  00731	48 8b d8	 mov	 rbx, rax
  00734	e8 00 00 00 00	 call	 __acrt_iob_func
  00739	41 b8 46 01 00
	00		 mov	 r8d, 326		; 00000146H

; 327  :                 break;

  0073f	e9 c2 fd ff ff	 jmp	 $LN62@main
$LN40@main:

; 328  :             }
; 329  : 
; 330  :             datasize = BSIZE;
; 331  : 
; 332  :             Status = SystemTable->RuntimeServices->GetVariable(

  00744	49 8b 46 58	 mov	 rax, QWORD PTR [r14+88]
  00748	4c 8d 4d e7	 lea	 r9, QWORD PTR datasize$[rbp-185]
  0074c	45 33 c0	 xor	 r8d, r8d
  0074f	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  00754	48 8d 55 c7	 lea	 rdx, QWORD PTR guid$[rbp-185]
  00758	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@PJHILOPO@?$AAC?$AAd?$AAe?$AAL?$AAo?$AAa?$AAd?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn@
  0075f	ff 50 48	 call	 QWORD PTR [rax+72]

; 333  :                 L"CdeLoadOption"    /* IN CHAR16 * VariableName */,
; 334  :                 &guid               /* IN EFI_GUID * VendorGuid */,
; 335  :                 NULL                /* OUT UINT32 * Attributes OPTIONAL*/,
; 336  :                 &datasize           /* IN OUT UINTN * DataSize */,
; 337  :                 pNvram              /* OUT VOID * Data OPTIONAL*/
; 338  :             );
; 339  : 
; 340  :             //fprintf(stderr, __FILE__"%d): ""%s\n", __LINE__, strefierror(Status));
; 341  : 
; 342  :             if (EFI_SUCCESS != Status) {

  00762	48 85 c0	 test	 rax, rax
  00765	0f 84 a8 00 00
	00		 je	 $LN41@main

; 343  :                 fprintf(stderr, __FILE__"(%d): ""fail to read NVRAM variable \"CdeLoadOption\" : %08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X -> %s\n", __LINE__, guid.Data1, guid.Data2, guid.Data3, guid.Data4[0], guid.Data4[1], guid.Data4[2], guid.Data4[3], guid.Data4[4], guid.Data4[5], guid.Data4[6], guid.Data4[7], strefierror(Status));

  0076b	48 8b c8	 mov	 rcx, rax
  0076e	e8 00 00 00 00	 call	 strefierror
  00773	0f b6 7d d6	 movzx	 edi, BYTE PTR guid$[rbp-170]
  00777	48 8b d8	 mov	 rbx, rax
  0077a	0f b6 45 d0	 movzx	 eax, BYTE PTR guid$[rbp-176]
  0077e	b9 02 00 00 00	 mov	 ecx, 2
  00783	0f b6 75 d5	 movzx	 esi, BYTE PTR guid$[rbp-171]
  00787	44 0f b6 75 d4	 movzx	 r14d, BYTE PTR guid$[rbp-172]
  0078c	44 0f b6 7d d3	 movzx	 r15d, BYTE PTR guid$[rbp-173]
  00791	44 0f b6 65 d2	 movzx	 r12d, BYTE PTR guid$[rbp-174]
  00796	44 0f b6 6d d1	 movzx	 r13d, BYTE PTR guid$[rbp-175]
  0079b	89 45 67	 mov	 DWORD PTR tv505[rbp-185], eax
  0079e	0f b6 45 cf	 movzx	 eax, BYTE PTR guid$[rbp-177]
  007a2	89 45 6f	 mov	 DWORD PTR tv509[rbp-185], eax
  007a5	0f b7 45 cd	 movzx	 eax, WORD PTR guid$[rbp-179]
  007a9	89 45 77	 mov	 DWORD PTR tv511[rbp-185], eax
  007ac	0f b7 45 cb	 movzx	 eax, WORD PTR guid$[rbp-181]
  007b0	89 45 7f	 mov	 DWORD PTR tv513[rbp-185], eax
  007b3	e8 00 00 00 00	 call	 __acrt_iob_func
  007b8	44 8b 4d c7	 mov	 r9d, DWORD PTR guid$[rbp-185]
  007bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0KA@BCMAFLKC@Y?3?2EDK2020?9MinnowBoard?2CdePkg?2L@
  007c3	48 89 5c 24 70	 mov	 QWORD PTR [rsp+112], rbx
  007c8	48 8b c8	 mov	 rcx, rax
  007cb	8b 45 67	 mov	 eax, DWORD PTR tv505[rbp-185]
  007ce	41 b8 57 01 00
	00		 mov	 r8d, 343		; 00000157H
  007d4	89 7c 24 68	 mov	 DWORD PTR [rsp+104], edi
  007d8	89 74 24 60	 mov	 DWORD PTR [rsp+96], esi
  007dc	44 89 74 24 58	 mov	 DWORD PTR [rsp+88], r14d
  007e1	44 89 7c 24 50	 mov	 DWORD PTR [rsp+80], r15d
  007e6	44 89 64 24 48	 mov	 DWORD PTR [rsp+72], r12d
  007eb	44 89 6c 24 40	 mov	 DWORD PTR [rsp+64], r13d
  007f0	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  007f4	8b 45 6f	 mov	 eax, DWORD PTR tv509[rbp-185]
  007f7	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  007fb	8b 45 77	 mov	 eax, DWORD PTR tv511[rbp-185]
  007fe	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00802	8b 45 7f	 mov	 eax, DWORD PTR tv513[rbp-185]
  00805	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00809	e8 00 00 00 00	 call	 fprintf

; 344  :                 break;

  0080e	e9 d6 00 00 00	 jmp	 $LN3@main
$LN41@main:

; 345  :             }
; 346  :             printf("CdeLoadOption : %08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X command line \"%s\" successfully createdn\n", guid.Data1, guid.Data2, guid.Data3, guid.Data4[0], guid.Data4[1], guid.Data4[2], guid.Data4[3], guid.Data4[4], guid.Data4[5], guid.Data4[6], guid.Data4[7], pNvram->CommandLine);

  00813	0f b6 4d d6	 movzx	 ecx, BYTE PTR guid$[rbp-170]
  00817	49 8d 47 04	 lea	 rax, QWORD PTR [r15+4]
  0081b	0f b6 55 d5	 movzx	 edx, BYTE PTR guid$[rbp-171]
  0081f	44 0f b6 55 d4	 movzx	 r10d, BYTE PTR guid$[rbp-172]
  00824	44 0f b6 5d d3	 movzx	 r11d, BYTE PTR guid$[rbp-173]
  00829	0f b6 5d d2	 movzx	 ebx, BYTE PTR guid$[rbp-174]
  0082d	0f b6 7d d1	 movzx	 edi, BYTE PTR guid$[rbp-175]
  00831	0f b6 75 d0	 movzx	 esi, BYTE PTR guid$[rbp-176]
  00835	44 0f b6 75 cf	 movzx	 r14d, BYTE PTR guid$[rbp-177]
  0083a	44 0f b7 4d cd	 movzx	 r9d, WORD PTR guid$[rbp-179]
  0083f	44 0f b7 45 cb	 movzx	 r8d, WORD PTR guid$[rbp-181]
  00844	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  00849	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  0084d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GK@LFFNLDPK@CdeLoadOption?5?3?5?$CF08X?9?$CF04X?9?$CF04X?9@
  00854	89 54 24 50	 mov	 DWORD PTR [rsp+80], edx
  00858	8b 55 c7	 mov	 edx, DWORD PTR guid$[rbp-185]
  0085b	44 89 54 24 48	 mov	 DWORD PTR [rsp+72], r10d
  00860	44 89 5c 24 40	 mov	 DWORD PTR [rsp+64], r11d
  00865	89 5c 24 38	 mov	 DWORD PTR [rsp+56], ebx
  00869	89 7c 24 30	 mov	 DWORD PTR [rsp+48], edi
  0086d	89 74 24 28	 mov	 DWORD PTR [rsp+40], esi
  00871	44 89 74 24 20	 mov	 DWORD PTR [rsp+32], r14d
  00876	e8 00 00 00 00	 call	 printf
  0087b	eb 6c		 jmp	 SHORT $LN3@main
$LN20@main:

; 81   :             printf("\nLoadOption UEFI shell tool to add, modify, disable and delete command line\noptions for CdePkg based POST drivers\n\n");

  0087d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0HE@JENICHIJ@?6LoadOption?5UEFI?5shell?5tool?5to?5@
  00884	e8 00 00 00 00	 call	 printf

; 82   :             printf("LoadOption /guid 12345678-0000-1111-2233-445566778899 [/cmd \"commandline\"] [/dis] [/ena] [/del]\n");

  00889	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GB@BCFNMDNB@LoadOption?5?1guid?512345678?90000?9@
  00890	e8 00 00 00 00	 call	 printf

; 83   :             printf("    or\nLoadOption /list\n\n");

  00895	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@OIHPKFHL@?5?5?5?5or?6LoadOption?5?1list?6?6@
  0089c	e8 00 00 00 00	 call	 printf

; 84   :             printf("    /list   list all command line reserved for CdePkg drivers\n");

  008a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DP@FIOANFFL@?5?5?5?5?1list?5?5?5list?5all?5command?5li@
  008a8	e8 00 00 00 00	 call	 printf

; 85   :             printf("    /guid   FILE_GUID of the POST driver\n");

  008ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CK@GCGNNGGP@?5?5?5?5?1guid?5?5?5FILE_GUID?5of?5the?5PO@
  008b4	e8 00 00 00 00	 call	 printf

; 86   :             printf("    /cmd    command line including of program name and parameters\n");

  008b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0ED@CLNLHKAP@?5?5?5?5?1cmd?5?5?5?5command?5line?5includ@
  008c0	e8 00 00 00 00	 call	 printf

; 87   :             printf("    /dis    disable a driver during POST. The main() function is not invoked\n");

  008c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EO@OEHIONND@?5?5?5?5?1dis?5?5?5?5disable?5a?5driver?5du@
  008cc	e8 00 00 00 00	 call	 printf

; 88   :             printf("    /ena    enable a driver for POST.\n");

  008d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CH@DOKDNGDN@?5?5?5?5?1ena?5?5?5?5enable?5a?5driver?5for@
  008d8	e8 00 00 00 00	 call	 printf

; 89   :             printf("    /del    delete command line for a driver. The driver is invoked during POST as an \"unknownCdeDriver\"\n");

  008dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GK@MJJBIJIE@?5?5?5?5?1del?5?5?5?5delete?5command?5line@
  008e4	e8 00 00 00 00	 call	 printf
$LN3@main:

; 347  : 
; 348  :         }
; 349  :     } while (0);
; 350  : 
; 351  :     return nRet;

  008e9	b8 01 00 00 00	 mov	 eax, 1

; 352  : }

  008ee	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  008f5	41 5f		 pop	 r15
  008f7	41 5e		 pop	 r14
  008f9	41 5d		 pop	 r13
  008fb	41 5c		 pop	 r12
  008fd	5f		 pop	 rdi
  008fe	5e		 pop	 rsi
  008ff	5b		 pop	 rbx
  00900	5d		 pop	 rbp
  00901	c3		 ret	 0
main	ENDP
_TEXT	ENDS
END
